     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; 制作目标文件的模式
     5 00000000                                 [INSTRSET "i486p"]				; 这个程序是给486用的哦	
     6 00000000                                 [BITS 32]						; 制作32位模式用的机械语言
     7 00000000                                 [FILE "naskfunc.nas"]			; 源文件名信息
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt	; 程序中包含的函数名
    10 00000000                                 		GLOBAL	_io_in8, _io_in16, _io_in32 
    11 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32 
    12 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags 
    13 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    14 00000000                                 		GLOBAL	_load_cr0, _store_cr0
    15 00000000                                 		GLOBAL	_asm_inthandler21, _asm_inthandler27, _asm_inthandler2c
    16 00000000                                 		EXTERN	_inthandler21, _inthandler27, _inthandler2c
    17 00000000                                 
    18                                          [SECTION .text]		; 目标文件中写了这些之后再写程序
    19 00000000                                 
    20 00000000                                 _io_hlt:	; void io_hlt(void);
    21 00000000 F4                              		HLT
    22 00000001 C3                              		RET
    23 00000002                                 
    24 00000002                                 _io_cli:	; void io_cli(void);
    25 00000002 FA                              		CLI
    26 00000003 C3                              		RET
    27 00000004                                 
    28 00000004                                 _io_sti:	; void io_sti(void);
    29 00000004 FB                              		STI
    30 00000005 C3                              		RET
    31 00000006                                 
    32 00000006                                 _io_stihlt:	; void io_stihlt(void);
    33 00000006 FB                              		STI
    34 00000007 F4                              		HLT
    35 00000008 C3                              		RET
    36 00000009                                 
    37 00000009                                 _io_in8:	; int io_in8(int port);
    38 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    39 0000000D B8 00000000                     		MOV		EAX,0
    40 00000012 EC                              		IN		AL,DX
    41 00000013 C3                              		RET
    42 00000014                                 
    43 00000014                                 _io_in16:	; int io_in16(int port);
    44 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    45 00000018 B8 00000000                     		MOV		EAX,0
    46 0000001D 66 ED                           		IN		AX,DX
    47 0000001F C3                              		RET
    48 00000020                                 
    49 00000020                                 _io_in32:	; int io_in32(int port);
    50 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    51 00000024 ED                              		IN		EAX,DX
    52 00000025 C3                              		RET
    53 00000026                                 
    54 00000026                                 _io_out8:	; void io_out8(int port, int data);
    55 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    56 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    57 0000002E EE                              		OUT		DX,AL
    58 0000002F C3                              		RET
    59 00000030                                 
    60 00000030                                 _io_out16:	; void io_out16(int port, int data);
    61 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    62 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    63 00000038 66 EF                           		OUT		DX,AX
    64 0000003A C3                              		RET
    65 0000003B                                 
    66 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    67 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    68 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    69 00000043 EF                              		OUT		DX,EAX
    70 00000044 C3                              		RET
    71 00000045                                 
    72 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    73 00000045 9C                              		PUSHFD		; 指 PUSH EFLAGS 
    74 00000046 58                              		POP		EAX
    75 00000047 C3                              		RET
    76 00000048                                 
    77 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    78 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    79 0000004C 50                              		PUSH	EAX
    80 0000004D 9D                              		POPFD		; 指 POP EFLAGS 
    81 0000004E C3                              		RET
    82 0000004F                                 
    83 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    84 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    85 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    86 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    87 0000005E C3                              		RET
    88 0000005F                                 
    89 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
    90 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    91 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
    92 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
    93 0000006E C3                              		RET
    94 0000006F                                 
    95 0000006F                                 _load_cr0:		; int load_cr0(void);
    96 0000006F 0F 20 C0                        		MOV		EAX, CR0
    97 00000072 C3                              		RET
    98 00000073                                 
    99 00000073                                 _store_cr0:		; void store_cr0(int cr0);
   100 00000073 8B 44 24 04                     		MOV		EAX, [ESP+4]
   101 00000077 0F 22 C0                        		MOV		CR0, EAX
   102 0000007A C3                              		RET
   103 0000007B                                 
   104 0000007B                                 _asm_inthandler21:
   105 0000007B 06                              		PUSH	ES
   106 0000007C 1E                              		PUSH	DS
   107 0000007D 60                              		PUSHAD
   108 0000007E 89 E0                           		MOV		EAX,ESP
   109 00000080 50                              		PUSH	EAX
   110 00000081 66 8C D0                        		MOV		AX,SS
   111 00000084 8E D8                           		MOV		DS,AX
   112 00000086 8E C0                           		MOV		ES,AX
   113 00000088 E8 [00000000]                   		CALL	_inthandler21
   114 0000008D 58                              		POP		EAX
   115 0000008E 61                              		POPAD
   116 0000008F 1F                              		POP		DS
   117 00000090 07                              		POP		ES
   118 00000091 CF                              		IRETD
   119 00000092                                 
   120 00000092                                 _asm_inthandler27:
   121 00000092 06                              		PUSH	ES
   122 00000093 1E                              		PUSH	DS
   123 00000094 60                              		PUSHAD
   124 00000095 89 E0                           		MOV		EAX,ESP
   125 00000097 50                              		PUSH	EAX
   126 00000098 66 8C D0                        		MOV		AX,SS
   127 0000009B 8E D8                           		MOV		DS,AX
   128 0000009D 8E C0                           		MOV		ES,AX
   129 0000009F E8 [00000000]                   		CALL	_inthandler27
   130 000000A4 58                              		POP		EAX
   131 000000A5 61                              		POPAD
   132 000000A6 1F                              		POP		DS
   133 000000A7 07                              		POP		ES
   134 000000A8 CF                              		IRETD
   135 000000A9                                 
   136 000000A9                                 _asm_inthandler2c:
   137 000000A9 06                              		PUSH	ES
   138 000000AA 1E                              		PUSH	DS
   139 000000AB 60                              		PUSHAD
   140 000000AC 89 E0                           		MOV		EAX,ESP
   141 000000AE 50                              		PUSH	EAX
   142 000000AF 66 8C D0                        		MOV		AX,SS
   143 000000B2 8E D8                           		MOV		DS,AX
   144 000000B4 8E C0                           		MOV		ES,AX
   145 000000B6 E8 [00000000]                   		CALL	_inthandler2c
   146 000000BB 58                              		POP		EAX
   147 000000BC 61                              		POPAD
   148 000000BD 1F                              		POP		DS
   149 000000BE 07                              		POP		ES
   150 000000BF CF                              		IRETD